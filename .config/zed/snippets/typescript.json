{
  "Contstructor": {
    "prefix": ["ctr"],
    "body": ["constructor() {\n\t$0\n}"]
  },
  "Anonymous arrow function": {
    "prefix": ["afn"],
    "body": ["($1) => $0"]
  },
  "nfn": {
    "prefix": ["nfn"],
    "body": ["const ${1:name} = ($2) => $0"]
  },
  "console.log()": {
    "prefix": "clg",
    "body": ["console.log($0)"]
  },
  "console.log({ })": {
    "prefix": "clj",
    "body": ["console.log({ $0 })"]
  },

  // Arrays
  ".forEach": {
    "prefix": [".for"],
    "body": ["forEach(($1) => $0)"]
  },
  ".map": {
    "prefix": [".map"],
    "body": ["map(($1) => $0)"]
  },
  ".reduce": {
    "prefix": [".red"],
    "body": ["reduce((${1:acc}, ${2:prev}${3:, ${4:i}${5:, ${6:arr}}}) => $0)"]
  },
  ".filter": {
    "prefix": [".fil"],
    "body": ["filter(($1) => $2)$0"]
  },
  ".find": {
    "prefix": [".fin"],
    "body": ["find(($1) => ${0:$TM_SELECTED_TEXT})"]
  },
  ".some": {
    "prefix": [".som"],
    "body": ["some(($1) => ${0:$TM_SELECTED_TEXT})"]
  },

  // Angular
  "signal": {
    "prefix": ["sig"],
    "body": ["signal${1:<$2>}($0)"]
  },
  "effect": {
    "prefix": ["efc"],
    "body": ["effect(() => $0)"]
  },
  "computed": {
    "prefix": ["cmp"],
    "body": ["computed${1:<$2>}(() => $0)"]
  },
  "inject": {
    "prefix": ["inj"],
    "body": ["readonly {$1:name} = inject($2:dependency)$0"]
  },
  "private inject": {
    "prefix": ["pinj"],
    "body": ["private readonly ${1:name} = inject(${2:dependency})$0"]
  },

  // Angular: testing
  "beforeAll": {
    "prefix": ["ball"],
    "body": ["beforeAll(() => $0)"]
  },
  "beforeEach": {
    "prefix": ["beach"],
    "body": ["beforeEach(() => $0)"]
  },
  "afterAll": {
    "prefix": ["aall"],
    "body": ["afterAll(() => $0)"]
  },
  "afterEach": {
    "prefix": ["aeach"],
    "body": ["afterEach(() => $0)"]
  },
  "it": {
    "prefix": ["it"],
    "body": [
      //
      "it('$1', () => {",
      "\t$0",
      "})"
    ]
  },
  "expect once": {
    "prefix": ["ex1"],
    "body": [
      "expect($1).toHaveBeenCalledTimes(1)",
      "expect($1).toHaveBeenCalledWith($0)"
    ]
  },

  "AAA": {
    "prefix": ["aaa"],
    "body": ["// arrange", "\t$0", "", "\t// act", "", "\t// assert"]
  }
}
